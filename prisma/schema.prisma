generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int          @id @default(autoincrement())
  email        String       @unique
  password     String
  fullName     String
  isActive     Boolean      @default(true)
  isVerified   Boolean      @default(false)
  role         Role         @default(USER)
  refreshToken String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  otpCodes     UserOtp[]
  reviews      Review[]
  borrowings   Borrowing[]

  @@map("users")
}

model UserOtp {
  id        Int        @id @default(autoincrement())
  userId    Int
  code      String
  status    OtpStatus  @default(SEND)
  expiresAt DateTime
  createdAt DateTime   @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_otps")
}

model Author {
  id           Int           @id @default(autoincrement())
  fullName     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  bookAuthors  BookAuthor[]

  @@map("authors")
}

model Category {
  id              Int             @id @default(autoincrement())
  name            String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  bookCategories  BookCategory[]

  @@map("categories")
}

model Book {
  id              Int             @id @default(autoincrement())
  title           String
  description     String
  language        Language        @default(UZBEK)
  rating          Float           @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  borrowings      Borrowing[]
  reviews         Review[]
  bookAuthors     BookAuthor[]
  bookCategories  BookCategory[]
  images          BookImage[]
  file            File?           @relation("BookPDF", fields: [fileId], references: [id])
  fileId          Int?            @unique

  @@map("books")
}

model BookAuthor {
  id        Int      @id @default(autoincrement())
  bookId    Int
  authorId  Int
  createdAt DateTime @default(now())

  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  author Author @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([bookId, authorId])
  @@map("book_authors")
}

model BookCategory {
  id         Int      @id @default(autoincrement())
  bookId     Int
  categoryId Int

  book     Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([bookId, categoryId])
  @@map("book_categories")
}

model BookImage {
  id        Int      @id @default(autoincrement())
  bookId    Int
  url       String
  createdAt DateTime @default(now())

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("book_images")
}

model File {
  id        Int      @id @default(autoincrement())
  name      String
  url       String
  type      FileType
  createdAt DateTime @default(now())

  book      Book?    @relation("BookPDF")

  @@map("files")
}

model Borrowing {
  id        Int              @id @default(autoincrement())
  userId    Int
  bookId    Int
  fromDate  DateTime
  toDate    DateTime
  returned  DateTime?
  status    BorrowingStatus  @default(BORROWED)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("borrowings")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

enum Role {
  ADMIN
  USER
}

enum OtpStatus {
  SEND
  VERIFIED
  EXPIRED
}

enum FileType {
  IMAGE
  PDF
  DOC
}

enum Language {
  UZBEK
  ENGLISH
  RUSSIAN
}

enum BorrowingStatus {
  BORROWED
  RETURNED
  OVERDUE
}
